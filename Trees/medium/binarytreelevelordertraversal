import java.util.*;
class main{
    static class TreeNode {
        int data;
        TreeNode left;
        TreeNode right;
        TreeNode(int x){
            data=x;
            left= null;
            right= null;
        }
    }

    public static void main(String [] args){
        Scanner sc= new Scanner(System.in);
        int n= sc.nextInt();
        int [] nums = new int[n];
        for (int i =0;i< nums.length;i++){
            nums[i]= sc.nextInt();
        }
        sc.close();
        TreeNode head = arrTreeNode(nums);
        List<List<Integer>> result = levelOrder(head);
        for (List<Integer> meow : result){
            for (int me: meow){
                System.out.print(me+" ");
            }
            System.out.println();
        }
    }
    public static TreeNode arrTreeNode(int [] nums){
        if (nums.length ==0){
            return null;
        }
        TreeNode head= new TreeNode(nums[0]);
        Queue<TreeNode> queue= new LinkedList<>();
        queue.offer(head);
        int i =1;

        while (!queue.isEmpty() && i< nums.length){
            TreeNode curr= queue.poll();

            if (i< nums.length && nums[i]!=-1){
                curr.left= new TreeNode(nums[i]);
                queue.offer(curr.left);
            }
            i++;

            if (i< nums.length && nums[i]!=-1){
                curr.right= new TreeNode (nums[i]);
                queue.offer(curr.right);
            }
            i++;
        }
        return head;
    }

    public static List<List<Integer>> levelOrder( TreeNode head){
        List<List<Integer>> result = new ArrayList<>();
        if (head == null){
            return result ;
        }

        Queue <TreeNode> queue= new LinkedList<>();
        queue.offer(head);
        while(!queue.isEmpty()){
            int size =queue.size(); // this is a size that will change 
            List<Integer> current = new ArrayList<>();
            for (int i =0;i< size;i++){
                TreeNode curr= queue.poll();
                current.add(curr.data);
                if (curr.left!= null){
                    queue.offer(curr.left);
                } 
                if (curr.right!= null){
                    queue.offer(curr.right);
                }
                
            }
            result.add(current);
        }
        return result ;
    }
}